# -*- coding: utf-8 -*-
"""Optimization_ImpliedVolatility.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mj8jyJLY0w5vPj0LQiktRSqyKVgy27zj

Implementation of the numerical inversion of a one-variable function for the computation of the implied volatility
"""

import pandas as pd

df_prices = pd.read_csv('PutPrices.csv')
df_prices

# moneyness here is defined as K/S(t)
df_prices['moneyness'] = df_prices['K']/df_prices['spot']
df_prices

import numpy as np
from scipy.stats import norm

def BSPutOption(S, T, K, r, q, sigma):
  d1 = ( np.log(S/K) +(r -q +0.5*sigma**2)*T )/(sigma*np.sqrt(T))
  d2 = d1-sigma*np.sqrt(T)

  put_price = K*np.exp(-r*T)*norm.cdf(-d2) -S*np.exp(-q*T)*norm.cdf(-d1)
  return put_price

df_prices['BS Price'] = BSPutOption(df_prices['spot'], df_prices['T'],\
                                    df_prices['K'], df_prices['r'],\
                                    df_prices['q'], df_prices['sigma'])

df_prices

# RPE: relative pricing error: abs(mkt_price - BS_price)/mkt_price

df_prices['RPE'] = np.abs(df_prices['mkt price']-df_prices['BS Price'])/df_prices['mkt price']
df_prices

from scipy.optimize import minimize

def computeIV(S, T, K, r, q, mktprice, sigma0):

  # the independent variable of the following objective function is x = sigma
  def objFct(x):
    return (mktprice - BSPutOption(S, T, K, r, q, x))**2

  IVresult = minimize(objFct, sigma0, bounds = [(0,None)])
  return IVresult.x

n = len(df_prices)
n

IVs = np.zeros(n)

for i in range(n):
  S = df_prices['spot'].iloc[i]
  T = df_prices['T'].iloc[i]
  K = df_prices['K'].iloc[i]
  r = df_prices['r'].iloc[i]
  q = df_prices['q'].iloc[i]
  mktPrice = df_prices['mkt price'].iloc[i]

  IVs[i] = computeIV(S,T,K,r,q,mktPrice,0.4)

IVs

import matplotlib.pyplot as plt

moneyness = df_prices['moneyness'].to_numpy()

plt.plot(moneyness, IVs, linewidth=2)
plt.title('Plot')